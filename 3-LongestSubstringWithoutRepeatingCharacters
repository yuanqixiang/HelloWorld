/*
Given a string, find the length of the longest substring without repeating characters.

Examples:

Given "abcabcbb", the answer is "abc", which the length is 3.

Given "bbbbb", the answer is "b", with the length of 1.

Given "pwwkew", the answer is "wke", with the length of 3. Note that the answer must be a substring, "pwke" is a subsequence and not a substring.

Subscribe to see which companies asked this question.

*/


/*
 * C++ code
 */
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
      map<char, int> m;
      int maxLen = 0;
      int start = -1;
      for(int i = 0; i < s.size(); ++i)
      {
          if(m.count(s[i]) != 0)
          {
              start = max(start, m[s[i]]);
          }
          
          m[s[i]] = i;
          maxLen = max(maxLen, i - start);
      }
      return maxLen;
    }
};


/*
 * Java code
 */

//核心思想：遍历整个字符串的时候，需要记录每个字符‘最近’一次出现的索引，需要用一个Map来实现，
//如果Map中已经存在该字符，就更新start值，
class Solution {
    public int lengthOfLongestSubstring(String s) {
        Map<Character, Integer> map = new HashMap<>();
        int maxLen = 0;
        int start = -1;
        for(int i = 0; i < s.length(); ++i){
            if(map.get(s.charAt(i)) != null)
                start = Math.max(start, map.get(s.charAt(i)));
            map.put(s.charAt(i), i);
            maxLen = Math.max(maxLen, i - start);
        }
        return maxLen;
    }
}
